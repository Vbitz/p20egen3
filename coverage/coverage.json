{
"/home/joshua/dev/projects/p20egen3/src/Datastore.ts":{"path":"/home/joshua/dev/projects/p20egen3/src/Datastore.ts","statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":19,"column":0}},"2":{"start":{"line":6,"column":10},"end":{"line":6,"column":45}},"3":{"start":{"line":8,"column":2},"end":{"line":10,"column":3}},"4":{"start":{"line":9,"column":4},"end":{"line":9,"column":30}},"5":{"start":{"line":12,"column":2},"end":{"line":18,"column":3}},"6":{"start":{"line":13,"column":4},"end":{"line":17,"column":5}},"7":{"start":{"line":14,"column":6},"end":{"line":14,"column":32}},"8":{"start":{"line":16,"column":6},"end":{"line":16,"column":26}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":1}},"10":{"start":{"line":5,"column":13},"end":{"line":5,"column":22}}},"fnMap":{"1":{"name":"(anonymous_0)","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":-1}}},"2":{"name":"Datastore","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":19,"column":1}}},"3":{"name":"(anonymous_2)","line":8,"loc":{"start":{"line":8,"column":30},"end":{"line":10,"column":3}}},"4":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":37},"end":{"line":18,"column":3}}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":17,"column":5}},{"start":{"line":13,"column":4},"end":{"line":17,"column":5}}]}},"s":{"1":1,"2":5,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":1,"10":1},"b":{"1":[0,0]},"f":{"1":1,"2":5,"3":0,"4":0},"code":["// tslint:disable:no-any","","import {Bag} from './common';","","export class Datastore {","  private data: Map<string, any> = new Map();","","  set<T>(key: string, value: T) {","    this.data.set(key, value);","  }","","  get<T>(key: string, defaultValue: T): T {","    if (this.data.has(key)) {","      return this.data.get(key);","    } else {","      return defaultValue;","    }","  }","}"],"l":{"5":1,"6":5,"8":1,"9":0,"12":1,"13":0,"14":0,"16":0,"19":1}},
"/home/joshua/dev/projects/p20egen3/src/Service.ts":{"path":"/home/joshua/dev/projects/p20egen3/src/Service.ts","statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"3":{"start":{"line":8,"column":21},"end":{"line":8,"column":26}},"4":{"start":{"line":9,"column":22},"end":{"line":9,"column":27}},"5":{"start":{"line":17,"column":19},"end":{"line":17,"column":56}},"6":{"start":{"line":18,"column":2},"end":{"line":18,"column":34}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":30}},"8":{"start":{"line":59,"column":0},"end":{"line":63,"column":1}},"9":{"start":{"line":60,"column":2},"end":{"line":60,"column":25}},"10":{"start":{"line":61,"column":2},"end":{"line":61,"column":16}},"11":{"start":{"line":62,"column":2},"end":{"line":62,"column":16}},"12":{"start":{"line":94,"column":0},"end":{"line":258,"column":0}},"13":{"start":{"line":100,"column":10},"end":{"line":100,"column":59}},"14":{"start":{"line":102,"column":10},"end":{"line":102,"column":67}},"15":{"start":{"line":104,"column":10},"end":{"line":104,"column":61}},"16":{"start":{"line":111,"column":4},"end":{"line":111,"column":37}},"17":{"start":{"line":113,"column":4},"end":{"line":114,"column":63}},"18":{"start":{"line":116,"column":4},"end":{"line":117,"column":54}},"19":{"start":{"line":120,"column":2},"end":{"line":122,"column":3}},"20":{"start":{"line":121,"column":4},"end":{"line":121,"column":36}},"21":{"start":{"line":124,"column":2},"end":{"line":126,"column":3}},"22":{"start":{"line":125,"column":4},"end":{"line":125,"column":27}},"23":{"start":{"line":128,"column":2},"end":{"line":134,"column":3}},"24":{"start":{"line":131,"column":4},"end":{"line":133,"column":6}},"25":{"start":{"line":136,"column":2},"end":{"line":149,"column":3}},"26":{"start":{"line":139,"column":18},"end":{"line":139,"column":41}},"27":{"start":{"line":141,"column":4},"end":{"line":146,"column":7}},"28":{"start":{"line":148,"column":4},"end":{"line":148,"column":17}},"29":{"start":{"line":151,"column":2},"end":{"line":153,"column":3}},"30":{"start":{"line":152,"column":4},"end":{"line":152,"column":38}},"31":{"start":{"line":155,"column":2},"end":{"line":158,"column":3}},"32":{"start":{"line":157,"column":4},"end":{"line":157,"column":66}},"33":{"start":{"line":160,"column":2},"end":{"line":168,"column":3}},"34":{"start":{"line":161,"column":4},"end":{"line":167,"column":6}},"35":{"start":{"line":170,"column":2},"end":{"line":225,"column":3}},"36":{"start":{"line":171,"column":4},"end":{"line":173,"column":5}},"37":{"start":{"line":172,"column":6},"end":{"line":172,"column":45}},"38":{"start":{"line":175,"column":19},"end":{"line":175,"column":56}},"39":{"start":{"line":176,"column":19},"end":{"line":176,"column":55}},"40":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"41":{"start":{"line":179,"column":6},"end":{"line":179,"column":45}},"42":{"start":{"line":182,"column":22},"end":{"line":182,"column":59}},"43":{"start":{"line":184,"column":4},"end":{"line":186,"column":5}},"44":{"start":{"line":185,"column":6},"end":{"line":185,"column":46}},"45":{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},"46":{"start":{"line":191,"column":6},"end":{"line":191,"column":46}},"47":{"start":{"line":194,"column":4},"end":{"line":224,"column":5}},"48":{"start":{"line":195,"column":27},"end":{"line":195,"column":49}},"49":{"start":{"line":197,"column":6},"end":{"line":197,"column":49}},"50":{"start":{"line":199,"column":6},"end":{"line":204,"column":8}},"51":{"start":{"line":205,"column":11},"end":{"line":224,"column":5}},"52":{"start":{"line":206,"column":39},"end":{"line":206,"column":41}},"53":{"start":{"line":207,"column":6},"end":{"line":210,"column":7}},"54":{"start":{"line":208,"column":8},"end":{"line":209,"column":80}},"55":{"start":{"line":211,"column":6},"end":{"line":215,"column":8}},"56":{"start":{"line":216,"column":11},"end":{"line":224,"column":5}},"57":{"start":{"line":217,"column":6},"end":{"line":221,"column":8}},"58":{"start":{"line":223,"column":6},"end":{"line":223,"column":56}},"59":{"start":{"line":232,"column":2},"end":{"line":234,"column":3}},"60":{"start":{"line":233,"column":4},"end":{"line":233,"column":36}},"61":{"start":{"line":236,"column":2},"end":{"line":244,"column":3}},"62":{"start":{"line":238,"column":25},"end":{"line":238,"column":53}},"63":{"start":{"line":239,"column":4},"end":{"line":243,"column":5}},"64":{"start":{"line":240,"column":6},"end":{"line":240,"column":34}},"65":{"start":{"line":242,"column":6},"end":{"line":242,"column":48}},"66":{"start":{"line":246,"column":2},"end":{"line":252,"column":3}},"67":{"start":{"line":247,"column":4},"end":{"line":249,"column":5}},"68":{"start":{"line":248,"column":6},"end":{"line":248,"column":46}},"69":{"start":{"line":251,"column":4},"end":{"line":251,"column":23}},"70":{"start":{"line":254,"column":2},"end":{"line":257,"column":3}},"71":{"start":{"line":255,"column":4},"end":{"line":256,"column":50}},"72":{"start":{"line":258,"column":0},"end":{"line":258,"column":1}},"73":{"start":{"line":94,"column":13},"end":{"line":94,"column":20}}},"fnMap":{"1":{"name":"makeUUID","line":16,"loc":{"start":{"line":16,"column":32},"end":{"line":19,"column":1}}},"2":{"name":"makeID","line":21,"loc":{"start":{"line":21,"column":45},"end":{"line":23,"column":1}}},"3":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":33},"end":{"line":63,"column":1}}},"4":{"name":"(anonymous_3)","line":94,"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":-1}}},"5":{"name":"Service","line":110,"loc":{"start":{"line":110,"column":2},"end":{"line":118,"column":3}}},"6":{"name":"(anonymous_5)","line":120,"loc":{"start":{"line":120,"column":2},"end":{"line":122,"column":3}}},"7":{"name":"(anonymous_6)","line":124,"loc":{"start":{"line":124,"column":2},"end":{"line":126,"column":3}}},"8":{"name":"(anonymous_7)","line":130,"loc":{"start":{"line":130,"column":24},"end":{"line":134,"column":3}}},"9":{"name":"(anonymous_8)","line":138,"loc":{"start":{"line":138,"column":24},"end":{"line":149,"column":3}}},"10":{"name":"(anonymous_9)","line":151,"loc":{"start":{"line":151,"column":30},"end":{"line":153,"column":3}}},"11":{"name":"(anonymous_10)","line":155,"loc":{"start":{"line":155,"column":71},"end":{"line":158,"column":3}}},"12":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":25},"end":{"line":168,"column":3}}},"13":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":38},"end":{"line":225,"column":3}}},"14":{"name":"(anonymous_13)","line":232,"loc":{"start":{"line":232,"column":24},"end":{"line":234,"column":3}}},"15":{"name":"(anonymous_14)","line":236,"loc":{"start":{"line":236,"column":77},"end":{"line":244,"column":3}}},"16":{"name":"(anonymous_15)","line":246,"loc":{"start":{"line":246,"column":38},"end":{"line":252,"column":3}}},"17":{"name":"(anonymous_16)","line":254,"loc":{"start":{"line":254,"column":61},"end":{"line":257,"column":3}}}},"branchMap":{"1":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":33}},{"start":{"line":59,"column":12},"end":{"line":59,"column":33}}]},"2":{"line":142,"type":"binary-expr","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":22}},{"start":{"line":142,"column":26},"end":{"line":142,"column":31}}]},"3":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":24},"end":{"line":143,"column":32}},{"start":{"line":143,"column":36},"end":{"line":143,"column":41}}]},"4":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":4},"end":{"line":173,"column":5}},{"start":{"line":171,"column":4},"end":{"line":173,"column":5}}]},"5":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},{"start":{"line":178,"column":4},"end":{"line":180,"column":5}}]},"6":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":186,"column":5}},{"start":{"line":184,"column":4},"end":{"line":186,"column":5}}]},"7":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":29}},{"start":{"line":184,"column":33},"end":{"line":184,"column":43}}]},"8":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},{"start":{"line":190,"column":4},"end":{"line":192,"column":5}}]},"9":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":224,"column":5}},{"start":{"line":194,"column":4},"end":{"line":224,"column":5}}]},"10":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":11},"end":{"line":224,"column":5}},{"start":{"line":205,"column":11},"end":{"line":224,"column":5}}]},"11":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":6},"end":{"line":210,"column":7}},{"start":{"line":207,"column":6},"end":{"line":210,"column":7}}]},"12":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":11},"end":{"line":224,"column":5}},{"start":{"line":216,"column":11},"end":{"line":224,"column":5}}]},"13":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":243,"column":5}},{"start":{"line":239,"column":4},"end":{"line":243,"column":5}}]},"14":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":4},"end":{"line":249,"column":5}},{"start":{"line":247,"column":4},"end":{"line":249,"column":5}}]},"15":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":11},"end":{"line":255,"column":42}},{"start":{"line":256,"column":8},"end":{"line":256,"column":49}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":12,"6":12,"7":12,"8":1,"9":1,"10":1,"11":1,"12":1,"13":5,"14":5,"15":5,"16":5,"17":5,"18":5,"19":1,"20":1,"21":1,"22":3,"23":1,"24":1,"25":1,"26":11,"27":11,"28":11,"29":1,"30":1,"31":1,"32":6,"33":1,"34":2,"35":1,"36":7,"37":1,"38":6,"39":6,"40":6,"41":1,"42":5,"43":5,"44":0,"45":5,"46":1,"47":5,"48":1,"49":1,"50":1,"51":4,"52":3,"53":3,"54":1,"55":3,"56":1,"57":1,"58":0,"59":1,"60":6,"61":1,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":1,"71":5,"72":1,"73":1},"b":{"1":[1,1],"2":[11,1],"3":[11,1],"4":[1,6],"5":[1,5],"6":[0,5],"7":[5,1],"8":[1,4],"9":[1,4],"10":[3,1],"11":[1,2],"12":[1,0],"13":[0,0],"14":[0,0],"15":[5,3]},"f":{"1":12,"2":12,"3":1,"4":1,"5":5,"6":1,"7":3,"8":1,"9":11,"10":1,"11":6,"12":2,"13":7,"14":6,"15":0,"16":0,"17":5},"code":["// tslint:disable:no-any\r","\r","import * as crypto from 'crypto';\r","\r","import {Bag} from './common';\r","import {Datastore} from './Datastore';\r","\r","const TOKEN_PREFIX = 'TKN';\r","const ACTION_PREFIX = 'ACT';\r","\r","/**\r"," * Create a random UUID.\r"," * @param prefix A string to prefix the resulting ID with. This is meant to be\r"," * used to identify the type of Identifier.\r"," */\r","function makeUUID(prefix: string) {\r","  const randomId = crypto.randomBytes(8).toString('hex');\r","  return makeID(prefix, randomId);\r","}\r","\r","function makeID(prefix: string, value: string) {\r","  return `${prefix}:${value}`;\r","}\r","\r","export type SessionID = string;\r","\r","export type ActionID = string;\r","\r","export type ActionTarget = InternalServiceAction;\r","\r","export interface ServiceRequest {\r","  sessionID: SessionID|undefined;\r","  actionID: ActionID;\r","  actionParams: any;\r","}\r","\r","export interface ServiceAction { actionID: ActionID; }\r","\r","export interface ServiceResponse {\r","  success: boolean;\r","  actions: ServiceAction[];\r","  data: ServiceResponseData;\r","}\r","\r","export interface ServiceResponseData {}\r","\r","export interface ServiceErrorData extends ServiceResponseData {\r","  message: string;\r","}\r","\r","export interface SessionCreateData extends ServiceResponseData {\r","  sessionID: SessionID;\r","}\r","\r","export interface ServicePingData extends ServiceResponseData {\r","  validLogin: boolean;\r","}\r","\r","export enum InternalServiceAction {\r","  CreateSession = 'SVC:0',\r","  Ping = 'SVC:1',\r","  Pong = 'SVC:2'\r","}\r","\r","export interface ClientValue<T> {\r","  magic: 'CLIENT';\r","  value: T;\r","}\r","\r","export interface ActionInfo {\r","  persist: boolean;\r","  shouldValidate: boolean;\r","  target: ActionTarget;\r","  params: any;\r","}\r","\r","export type ActionCallback = (resp: ServiceResponse) => void;\r","\r","export interface ActionService {\r","  handleEvent(service: Service, params: ClientValue<any>, cb: ActionCallback):\r","      void;\r","}\r","\r","/**\r"," * Base class representing a running service. Provides a set of RPC endpoints\r"," * and methods for allocating RPC calls to users.\r"," *\r"," * The main difference with this system is it facilitates highly stateful RPC\r"," * calls by allocating RPCs to users. Rather then discovering the complete list\r"," * of methods the server provides the client with a list of RPC methods they can\r"," * call at a given time which can then then be executed by replying to the\r"," * server.\r"," */\r","export class Service {\r","  // TODO(jscarsbrook): Add Storage+Session\r","\r","  // TODO(jscarsbrook): Move all of this into a persistent data store.\r","  private dataStore: Datastore;\r","\r","  private actionMap: Map<ActionID, ActionInfo> = new Map();\r","\r","  private actionHandlers: Map<ActionID, ActionService> = new Map();\r","\r","  private validSessions: Map<SessionID, boolean> = new Map();\r","\r","  private createSessionAction: ActionID;\r","\r","  private pingAction: ActionID;\r","\r","  constructor() {\r","    this.dataStore = new Datastore();\r","\r","    this.createSessionAction = this.registerActionWithType(\r","        InternalServiceAction.CreateSession, null, true, true);\r","\r","    this.pingAction = this.registerActionWithType(\r","        InternalServiceAction.Ping, null, true, true);\r","  }\r","\r","  getCreateSessionAction(): ActionID {\r","    return this.createSessionAction;\r","  }\r","\r","  getPingAction(): ActionID {\r","    return this.pingAction;\r","  }\r","\r","  createServiceAction(\r","      action: InternalServiceAction, persist?: boolean,\r","      insecure?: boolean): ServiceAction {\r","    return {\r","      actionID: this.registerActionWithType(action, null, persist, insecure)\r","    };\r","  }\r","\r","  registerActionWithType(\r","      action: ActionTarget, params: any, persist?: boolean,\r","      insecure?: boolean): ActionID {\r","    const newId = makeUUID(ACTION_PREFIX);\r","\r","    this.actionMap.set(newId, {\r","      persist: persist || false,\r","      shouldValidate: !(insecure || false),\r","      target: action,\r","      params\r","    });\r","\r","    return newId;\r","  }\r","\r","  post(request: ServiceRequest): ServiceResponse {\r","    return this.handleAction(request);\r","  }\r","\r","  request<T>(actionID: ActionID, actionParams: T, sessionID?: SessionID):\r","      ServiceResponse {\r","    return this.handleAction({actionID, actionParams, sessionID});\r","  }\r","\r","  createError(msg: string): ServiceResponse {\r","    return {\r","      success: false,\r","      data: {\r","        message: msg,\r","      } as ServiceErrorData,\r","      actions: []\r","    };\r","  }\r","\r","  handleAction(request: ServiceRequest): ServiceResponse {\r","    if (!request.actionID) {\r","      return this.createError('Bad Request');\r","    }\r","\r","    const params = this.flagClient(request.actionParams);\r","    const action = this.actionMap.get(request.actionID);\r","\r","    if (!action) {\r","      return this.createError('Bad Request');\r","    }\r","\r","    const validated = this.validateRequest(request, action);\r","\r","    if (action.shouldValidate && !validated) {\r","      return this.createError('Unauthorized');\r","    }\r","\r","    // Request is now authorized.\r","\r","    if (!action.persist) {\r","      this.actionMap.delete(request.actionID);\r","    }\r","\r","    if (action.target === InternalServiceAction.CreateSession) {\r","      const newSessionId = makeUUID(TOKEN_PREFIX);\r","\r","      this.validSessions.set(newSessionId, true);\r","\r","      return {\r","        success: true,\r","        data: {sessionID: newSessionId} as SessionCreateData,\r","        // TODO(jscarsbrook): Execute service entry point.\r","        actions: []\r","      };\r","    } else if (action.target === InternalServiceAction.Ping) {\r","      const actions: ServiceAction[] = [];\r","      if (validated) {\r","        actions.push(\r","            this.createServiceAction(InternalServiceAction.Pong, false, false));\r","      }\r","      return {\r","        success: true,\r","        data: {validLogin: validated} as ServicePingData,\r","        actions\r","      };\r","    } else if (action.target === InternalServiceAction.Pong) {\r","      return {\r","        success: true,\r","        data: {validLogin: validated} as ServicePingData,\r","        actions: []\r","      };\r","    } else {\r","      return this.createError('Action not Implemented');\r","    }\r","  }\r","\r","  // Security\r","\r","  // TODO(jscarsbrook): Fix this. Right now the best approach is to unbox the\r","  // whole object. I might make it impossible to unbox the whole thing.\r","\r","  flagClient<T>(value: T): ClientValue<T> {\r","    return {magic: 'CLIENT', value};\r","  }\r","\r","  getObjectValue<Value>(obj: ClientValue<Bag<Value>>, key: string, def: Value):\r","      ClientValue<Value> {\r","    const unBoxedValue = this.unboxClient(obj) as any;\r","    if (!unBoxedValue.hasOwnProperty(key)) {\r","      return this.flagClient(def);\r","    } else {\r","      return this.flagClient(unBoxedValue[key]);\r","    }\r","  }\r","\r","  unboxClient<T>(value: ClientValue<T>): T {\r","    if (value.magic !== 'CLIENT') {\r","      throw new Error('Corrupt Client Value');\r","    }\r","\r","    return value.value;\r","  }\r","\r","  validateRequest(request: ServiceRequest, action: ActionInfo): boolean {\r","    return request.sessionID !== undefined &&\r","        this.validSessions.has(request.sessionID);\r","  }\r","}\r",""],"l":{"3":1,"6":1,"8":1,"9":1,"17":12,"18":12,"22":12,"59":1,"60":1,"61":1,"62":1,"94":1,"100":5,"102":5,"104":5,"111":5,"113":5,"116":5,"120":1,"121":1,"124":1,"125":3,"128":1,"131":1,"136":1,"139":11,"141":11,"148":11,"151":1,"152":1,"155":1,"157":6,"160":1,"161":2,"170":1,"171":7,"172":1,"175":6,"176":6,"178":6,"179":1,"182":5,"184":5,"185":0,"190":5,"191":1,"194":5,"195":1,"197":1,"199":1,"205":4,"206":3,"207":3,"208":1,"211":3,"216":1,"217":1,"223":0,"232":1,"233":6,"236":1,"238":0,"239":0,"240":0,"242":0,"246":1,"247":0,"248":0,"251":0,"254":1,"255":5,"258":1}}}
